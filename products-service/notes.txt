Java Bean ==> Controller ==> Command Gateway ==> Interceptor (for validation)
                                            |
                                            ==> Dispatch Event to Command Bus
                                                        |
                                                        Command Handler
                                                        |
                                                        |dispatch 
                                                        |
                                                        Event Bus
                                                        |
                                                        Event Handler


3) Message Dispatch Interceptor : is used to validate message before event published.

        1) Traditional way tohandle it using JPA at the time of capturing RequestBody
        2) in aggregate class
====================================================================

SET based consistancy validation
--------------------------------
lookup db table at command api side ==> Search Their before publishing event

Command API[Optimized for Write] (Rest Controller => Command Handler ==> Pubish Event[ProductCreatedEvent])
                                                    Same Event is in Event Store

Query API[Optimized for Read] (Rest Controoler + QueryHandler + Events Handler ==> DB)



===============================================================================

in command API ==> rest controller ==> Data Sent to aggregate 
                                   ==> Message Dispatch Interceptor 
                                   (here it will query lookupdb table)
                                   ==> if all good it will come to Command Handler
                                   else xception

===================================================================================
@ProcessingGroup("product-group")

Logical group of event handlers 
===================================================================================

Two Types of Event Processors Modes :
        1) Tracking :
                pull their messages from a source using a thread that it manages itslef 
                so aggreagate is onOne thread and event handler is on another thread 

                it will retry processing the event using an incremental back off period 
                
        2) Subscribing :
                Subscribe themeselves to a source of events and are invoked by the thread managed by the publishing mechanism
                that means: Aggreagte and all the event handlers are in same thread context.

                will have the exception bubble up to the publishing component of the event
                if exception thrown the rollback occurs.

                ListenerInvocationErrorHandler: 
                        Listens for the exception and responsible for rollback
============================================================================================= 





